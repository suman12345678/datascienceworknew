sms_raw_train <- res_inc[train_ind, ]
sms_raw_test <- res_inc[-train_ind, ]
sms_dtm_train <- sms_dtm[train_ind, ]
sms_dtm_test <- sms_dtm[-train_ind, ]
sms_corpus_train <- corpus_clean[train_ind]
sms_corpus_test <- corpus_clean[-train_ind]
# get wordcloud for diff proj code
ind<-which(sms_raw_train$Assignment_Group=="F161 Sys  Mgm  EDW")
sms_corpus_train_f161 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F162 Sys  Mgm  Quality Assurance")
sms_corpus_train_f162 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F163 Sys  Mgm  EDW Infrastructure")
sms_corpus_train_f163 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F164 Sys  Mgm  EDW Architecture")
sms_corpus_train_f164 <- sms_corpus_train[ind]
wordcloud(sms_corpus_train_f161, min.freq = 5, random.order = FALSE)
wordcloud(sms_corpus_train_f162, min.freq = 5, random.order = FALSE)
wordcloud(sms_corpus_train_f163, min.freq = 5, random.order = FALSE)
wordcloud(sms_corpus_train_f164, min.freq = 5, random.order = FALSE)
wordcloud(sms_corpus_train, min.freq = 10, random.order = FALSE)
sms_train <- DocumentTermMatrix(sms_corpus_train)
sms_test <- DocumentTermMatrix(sms_corpus_test)
sms_train.m <- as.matrix(sms_train)
sms_test.m <- as.matrix(sms_test)
sms_train.df <- as.data.frame(sms_train.m)
sms_test.df <- as.data.frame(sms_test.m)
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c("No", "Yes"))
return(x)
}
#naive bayes only works with catagorigal data but DTM contains count
so we will change it to 1 or 0
sms_train.df <- apply(sms_train.df, MARGIN = 2, convert_counts)
sms_test.df <- apply(sms_test.df, MARGIN = 2, convert_counts)
#evaluation
f161<-as.factor(sms_raw_train$Assignment_Group=="F161 Sys  Mgm  EDW" )
sms_classifier_f161 <- naiveBayes(sms_train.df, f161,laplace=1)
sms_test_pred_f161_e <- predict(sms_classifier_f161, sms_test.df,type="raw")
f162<-as.factor(sms_raw_train$Assignment_Group=="F162 Sys  Mgm
Quality Assurance" )
sms_classifier_f162 <- naiveBayes(sms_train.df, f162,laplace=1)
sms_test_pred_f162_e <- predict(sms_classifier_f162, sms_test.df,type="raw")
f163<-as.factor(sms_raw_train$Assignment_Group=="F163 Sys  Mgm  EDW
Infrastructure" )
sms_classifier_f163 <- naiveBayes(sms_train.df, f163,laplace=1)
sms_test_pred_f163_e <- predict(sms_classifier_f163, sms_test.df,type="raw")
f164<-as.factor(sms_raw_train$Assignment_Group=="F164 Sys  Mgm  EDW
Architecture" )
sms_classifier_f164 <- naiveBayes(sms_train.df, f164,laplace=1)
sms_test_pred_f164_e <- predict(sms_classifier_f164, sms_test.df,type="raw")
str(res_inc)
table(res_inc$Assignment_Group)
str(res_inc)
dim(res_inc)
res_inc=res_inc[:,-1]
res_inc=res_inc[,-1]
dim(res_inc)
res_inc<-as.data.frame(lapply(res_inc ,function(x) gsub(".", " ",
x,fixed = TRUE)))
corp<-Corpus(VectorSource(res_inc$TITLE))
inspect(corp[1:3])
corpus_clean <- tm_map(corp, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
mystopword<-c("a","an","the","job","error","automatic","batch","tiludv","auto","ended","jcl","jcli")
corpus_clean <- tm_map(corpus_clean, removeWords,mystopword)
sms_dtm <- DocumentTermMatrix(corpus_clean)
#sms_dtm <- DocumentTermMatrix(corpus_clean,control=list(weighting=weightTfIdf))
set.seed(123)
smp_size <- floor(0.75 * nrow(res_inc))
train_ind <- sample(seq_len(nrow(res_inc)), size = smp_size)
sms_raw_train <- res_inc[train_ind, ]
sms_raw_test <- res_inc[-train_ind, ]
sms_dtm_train <- sms_dtm[train_ind, ]
sms_dtm_test <- sms_dtm[-train_ind, ]
sms_corpus_train <- corpus_clean[train_ind]
sms_corpus_test <- corpus_clean[-train_ind]
# get wordcloud for diff proj code
ind<-which(sms_raw_train$Assignment_Group=="F161 Sys  Mgm  EDW")
sms_corpus_train_f161 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F162 Sys  Mgm  Quality Assurance")
sms_corpus_train_f162 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F163 Sys  Mgm  EDW Infrastructure")
sms_corpus_train_f163 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F164 Sys  Mgm  EDW Architecture")
sms_corpus_train_f164 <- sms_corpus_train[ind]
wordcloud(sms_corpus_train_f161, min.freq = 5, random.order = FALSE)
wordcloud(sms_corpus_train_f162, min.freq = 5, random.order = FALSE)
wordcloud(sms_corpus_train_f163, min.freq = 5, random.order = FALSE)
wordcloud(sms_corpus_train_f164, min.freq = 5, random.order = FALSE)
wordcloud(sms_corpus_train, min.freq = 10, random.order = FALSE)
sms_train <- DocumentTermMatrix(sms_corpus_train)
sms_test <- DocumentTermMatrix(sms_corpus_test)
sms_train.m <- as.matrix(sms_train)
sms_test.m <- as.matrix(sms_test)
sms_train.df <- as.data.frame(sms_train.m)
sms_test.df <- as.data.frame(sms_test.m)
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c("No", "Yes"))
return(x)
}
#naive bayes only works with catagorigal data but DTM contains count
so we will change it to 1 or 0
sms_train.df <- apply(sms_train.df, MARGIN = 2, convert_counts)
sms_test.df <- apply(sms_test.df, MARGIN = 2, convert_counts)
#evaluation
f161<-as.factor(sms_raw_train$Assignment_Group=="F161 Sys  Mgm  EDW" )
sms_classifier_f161 <- naiveBayes(sms_train.df, f161,laplace=1)
sms_test_pred_f161_e <- predict(sms_classifier_f161, sms_test.df,type="raw")
f162<-as.factor(sms_raw_train$Assignment_Group=="F162 Sys  Mgm
Quality Assurance" )
sms_classifier_f162 <- naiveBayes(sms_train.df, f162,laplace=1)
sms_test_pred_f162_e <- predict(sms_classifier_f162, sms_test.df,type="raw")
head(res_inc,2)
f162<-as.factor(sms_raw_train$Assignment_Group=="F162 Sys  Mgm
f162<-as.factor(sms_raw_train$Assignment_Group=="F162 Sys  Mgm
Quality Assurance" )
f162<-as.factor(sms_raw_train$Assignment_Group=="F162 Sys  Mgm
Quality Assurance" )
f162
sms_classifier_f162 <- naiveBayes(sms_train.df, f162,laplace=1)
sms_test_pred_f162_e <- predict(sms_classifier_f162, sms_test.df,type="raw")
f163<-as.factor(sms_raw_train$Assignment_Group=="F163 Sys  Mgm  EDW
Infrastructure" )
sms_classifier_f163 <- naiveBayes(sms_train.df, f163,laplace=1)
sms_test_pred_f163_e <- predict(sms_classifier_f163, sms_test.df,type="raw")
f164<-as.factor(sms_raw_train$Assignment_Group=="F164 Sys  Mgm  EDW
Architecture" )
sms_classifier_f164 <- naiveBayes(sms_train.df, f164,laplace=1)
sms_test_pred_f164_e <- predict(sms_classifier_f164, sms_test.df,type="raw")
setwd("C:\\Users\\suman\\Desktop\\datasciencework\\PROJECTS")
library(slam)
library(NLP)
library(tm)
library(dplyr)
library(RColorBrewer)
library(wordcloud)
library(e1071)
setwd("C:\\Users\\suman\\Desktop\\datasciencework\\PROJECTS")
res_inc=read.csv("res_inc.csv")
str(res_inc)
table(res_inc$Assignment_Group)
res_inc=res_inc[,-1]
dim(res_inc)
str(res_inc)
res_inc<-as.data.frame(lapply(res_inc ,function(x) gsub(".", " ",
x,fixed = TRUE)))
corp<-Corpus(VectorSource(res_inc$TITLE))
inspect(corp[1:3])
corpus_clean <- tm_map(corp, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
mystopword<-c("a","an","the","job","error","automatic","batch","tiludv","auto","ended","jcl","jcli")
corpus_clean <- tm_map(corpus_clean, removeWords,mystopword)
sms_dtm <- DocumentTermMatrix(corpus_clean)
#sms_dtm <- DocumentTermMatrix(corpus_clean,control=list(weighting=weightTfIdf))
set.seed(123)
smp_size <- floor(0.75 * nrow(res_inc))
train_ind <- sample(seq_len(nrow(res_inc)), size = smp_size)
sms_raw_train <- res_inc[train_ind, ]
sms_raw_test <- res_inc[-train_ind, ]
sms_dtm_train <- sms_dtm[train_ind, ]
sms_dtm_test <- sms_dtm[-train_ind, ]
sms_corpus_train <- corpus_clean[train_ind]
sms_corpus_test <- corpus_clean[-train_ind]
# get wordcloud for diff proj code
ind<-which(sms_raw_train$Assignment_Group=="F161 Sys  Mgm  EDW")
sms_corpus_train_f161 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F162 Sys  Mgm  Quality Assurance")
sms_corpus_train_f162 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F163 Sys  Mgm  EDW Infrastructure")
sms_corpus_train_f163 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F164 Sys  Mgm  EDW Architecture")
sms_corpus_train_f164 <- sms_corpus_train[ind]
sms_train <- DocumentTermMatrix(sms_corpus_train)
sms_test <- DocumentTermMatrix(sms_corpus_test)
sms_train.m <- as.matrix(sms_train)
sms_test.m <- as.matrix(sms_test)
sms_train.df <- as.data.frame(sms_train.m)
sms_test.df <- as.data.frame(sms_test.m)
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c("No", "Yes"))
return(x)
}
#naive bayes only works with catagorigal data but DTM contains count
so we will change it to 1 or 0
sms_train.df <- apply(sms_train.df, MARGIN = 2, convert_counts)
sms_test.df <- apply(sms_test.df, MARGIN = 2, convert_counts)
#evaluation
f161<-as.factor(sms_raw_train$Assignment_Group=="F161 Sys  Mgm  EDW" )
sms_classifier_f161 <- naiveBayes(sms_train.df, f161,laplace=1)
sms_test_pred_f161_e <- predict(sms_classifier_f161, sms_test.df,type="raw")
corp<-Corpus(VectorSource(res_inc$TITLE))
inspect(corp[1:3])
corpus_clean <- tm_map(corp, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
mystopword<-c("a","an","the","job","error","automatic","batch","tiludv","auto","ended","jcl","jcli")
corpus_clean <- tm_map(corpus_clean, removeWords,mystopword)
sms_dtm <- DocumentTermMatrix(corpus_clean)
#sms_dtm <- DocumentTermMatrix(corpus_clean,control=list(weighting=weightTfIdf))
set.seed(123)
smp_size <- floor(0.75 * nrow(res_inc))
train_ind <- sample(seq_len(nrow(res_inc)), size = smp_size)
sms_raw_train <- res_inc[train_ind, ]
sms_raw_test <- res_inc[-train_ind, ]
sms_dtm_train <- sms_dtm[train_ind, ]
sms_dtm_test <- sms_dtm[-train_ind, ]
sms_corpus_train <- corpus_clean[train_ind]
sms_corpus_test <- corpus_clean[-train_ind]
# get wordcloud for diff proj code
ind<-which(sms_raw_train$Assignment_Group=="F161 Sys  Mgm  EDW")
sms_corpus_train_f161 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F162 Sys  Mgm  Quality Assurance")
sms_corpus_train_f162 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F163 Sys  Mgm  EDW Infrastructure")
sms_corpus_train_f163 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F164 Sys  Mgm  EDW Architecture")
sms_corpus_train_f164 <- sms_corpus_train[ind]
sms_train <- DocumentTermMatrix(sms_corpus_train)
sms_test <- DocumentTermMatrix(sms_corpus_test)
sms_train.m <- as.matrix(sms_train)
sms_test.m <- as.matrix(sms_test)
sms_train.df <- as.data.frame(sms_train.m)
sms_test.df <- as.data.frame(sms_test.m)
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c("No", "Yes"))
return(x)
}
#naive bayes only works with catagorigal data but DTM contains count
#so we will change it to 1 or 0
sms_train.df <- apply(sms_train.df, MARGIN = 2, convert_counts)
sms_test.df <- apply(sms_test.df, MARGIN = 2, convert_counts)
f161<-as.factor(sms_raw_train$Assignment_Group=="F161 Sys  Mgm  EDW" )
sms_classifier_f161 <- naiveBayes(sms_train.df, f161,laplace=1)
sms_test_pred_f161_e <- predict(sms_classifier_f161, sms_test.df,type="raw")
str(sms_test.df)
f162<-as.factor(sms_raw_train$Assignment_Group=="F162 Sys  Mgm
Quality Assurance" )
sms_classifier_f162 <- naiveBayes(sms_train.df, f162,laplace=1)
sms_test_pred_f162_e <- predict(sms_classifier_f162, sms_test.df,type="raw")
str(res_inc)
table(res_inc$Assignment_Group)
res_inc=res_inc[,-1]
dim(res_inc)
nrow(res_inc)
setwd("C:\\Users\\suman\\Desktop\\datasciencework\\PROJECTS")
res_inc=read.csv("res_inc.csv")
str(res_inc)
table(res_inc$Assignment_Group)
res_inc=res_inc[,-1]
nrow(res_inc)
res_inc<-as.data.frame(lapply(res_inc ,function(x) gsub(".", " ",
x,fixed = TRUE)))
corp<-Corpus(VectorSource(res_inc$TITLE))
inspect(corp[1:3])
corpus_clean <- tm_map(corp, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
mystopword<-c("a","an","the","job","error","automatic","batch","tiludv","auto","ended","jcl","jcli")
corpus_clean <- tm_map(corpus_clean, removeWords,mystopword)
sms_dtm <- DocumentTermMatrix(corpus_clean)
#sms_dtm <- DocumentTermMatrix(corpus_clean,control=list(weighting=weightTfIdf))
set.seed(123)
smp_size <- floor(0.75 * nrow(res_inc))
train_ind <- sample(seq_len(nrow(res_inc)), size = smp_size)
sms_raw_train <- res_inc[train_ind, ]
sms_raw_test <- res_inc[-train_ind, ]
sms_dtm_train <- sms_dtm[train_ind, ]
sms_dtm_test <- sms_dtm[-train_ind, ]
sms_corpus_train <- corpus_clean[train_ind]
sms_corpus_test <- corpus_clean[-train_ind]
ind<-which(sms_raw_train$Assignment_Group=="F161 Sys  Mgm  EDW")
sms_corpus_train_f161 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F162 Sys  Mgm  Quality Assurance")
sms_corpus_train_f162 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F163 Sys  Mgm  EDW Infrastructure")
sms_corpus_train_f163 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F164 Sys  Mgm  EDW Architecture")
sms_corpus_train_f164 <- sms_corpus_train[ind]
sms_train <- DocumentTermMatrix(sms_corpus_train)
sms_test <- DocumentTermMatrix(sms_corpus_test)
sms_train.m <- as.matrix(sms_train)
sms_test.m <- as.matrix(sms_test)
sms_train.df <- as.data.frame(sms_train.m)
sms_test.df <- as.data.frame(sms_test.m)
nrow(sms_corpus_train)
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c("No", "Yes"))
return(x)
}
sms_train.df <- apply(sms_train.df, MARGIN = 2, convert_counts)
sms_test.df <- apply(sms_test.df, MARGIN = 2, convert_counts)
f161<-as.factor(sms_raw_train$Assignment_Group=="F161 Sys  Mgm  EDW" )
sms_classifier_f161 <- naiveBayes(sms_train.df, f161,laplace=1)
sms_test_pred_f161_e <- predict(sms_classifier_f161, sms_test.df,type="raw")
sms_test_pred_f161_e
f162<-as.factor(sms_raw_train$Assignment_Group=="F162 Sys  Mgm
Quality Assurance" )
sms_classifier_f162 <- naiveBayes(sms_train.df, f162,laplace=1)
sms_test_pred_f162_e <- predict(sms_classifier_f162, sms_test.df,type="raw")
res_inc=read.csv("res_inc.csv")
str(res_inc)
table(res_inc$Assignment_Group)
res_inc=res_inc[,-1]
head(res_inc,3)
res_inc<-as.data.frame(lapply(res_inc ,function(x) gsub(".", " ",
x,fixed = TRUE)))
head(res_inc,3)
corp<-Corpus(VectorSource(res_inc$TITLE))
inspect(corp[1:3])
corpus_clean <- tm_map(corp, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
mystopword<-c("a","an","the","job","error","automatic","batch","tiludv","auto","ended","jcl","jcli")
corpus_clean <- tm_map(corpus_clean, removeWords,mystopword)
sms_dtm <- DocumentTermMatrix(corpus_clean)
set.seed(123)
smp_size <- floor(0.75 * nrow(res_inc))
train_ind <- sample(seq_len(nrow(res_inc)), size = smp_size)
sms_raw_train <- res_inc[train_ind, ]
sms_raw_test <- res_inc[-train_ind, ]
sms_dtm_train <- sms_dtm[train_ind, ]
sms_dtm_test <- sms_dtm[-train_ind, ]
sms_corpus_train <- corpus_clean[train_ind]
sms_corpus_test <- corpus_clean[-train_ind]
sms_train <- DocumentTermMatrix(sms_corpus_train)
sms_test <- DocumentTermMatrix(sms_corpus_test)
sms_train.m <- as.matrix(sms_train)
sms_test.m <- as.matrix(sms_test)
sms_train.df <- as.data.frame(sms_train.m)
sms_test.df <- as.data.frame(sms_test.m)
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c("No", "Yes"))
return(x)
}
sms_train.df <- apply(sms_train.df, MARGIN = 2, convert_counts)
sms_test.df <- apply(sms_test.df, MARGIN = 2, convert_counts)
#evaluation
f161<-as.factor(sms_raw_train$Assignment_Group=="F161 Sys  Mgm  EDW" )
sms_classifier_f161 <- naiveBayes(sms_train.df, f161,laplace=1)
sms_test_pred_f161_e <- predict(sms_classifier_f161, sms_test.df,type="raw")
```
f162<-as.factor(sms_raw_train$Assignment_Group=="F162 Sys  Mgm
Quality Assurance" )
sms_classifier_f162 <- naiveBayes(sms_train.df, f162,laplace=1)
sms_test_pred_f162_e <- predict(sms_classifier_f162, sms_test.df,type="raw")
sms_classifier <- naiveBayes(sms_train.df, as.factor(sms_raw_train$Assignment_Group)
)
sms_test_pred_e <- predict(sms_classifier, sms_test.df,type="raw")
sms_test_pred_e
sms_test_pred_e <- predict(sms_classifier, sms_test.df)
table(True=sms_raw_test$Assignment_Group,Pred=sms_test_pred_e)
corp<-Corpus(VectorSource(res_inc$TITLE))
inspect(corp[1:3])
corpus_clean <- tm_map(corp, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
mystopword<-c("a","an","the","job","error","automatic","batch","tiludv","auto","ended","jcl","jcli")
corpus_clean <- tm_map(corpus_clean, removeWords,mystopword)
sms_dtm <- DocumentTermMatrix(corpus_clean)
#sms_dtm <- DocumentTermMatrix(corpus_clean,control=list(weighting=weightTfIdf))
set.seed(123)
smp_size <- floor(0.75 * nrow(res_inc))
train_ind <- sample(seq_len(nrow(res_inc)), size = smp_size)
sms_raw_train <- res_inc[train_ind, ]
sms_raw_test <- res_inc[-train_ind, ]
sms_dtm_train <- sms_dtm[train_ind, ]
sms_dtm_test <- sms_dtm[-train_ind, ]
sms_corpus_train <- corpus_clean[train_ind]
sms_corpus_test <- corpus_clean[-train_ind]
# get wordcloud for diff proj code
ind<-which(sms_raw_train$Assignment_Group=="F161 Sys  Mgm  EDW")
sms_corpus_train_f161 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F162 Sys  Mgm  Quality Assurance")
sms_corpus_train_f162 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F163 Sys  Mgm  EDW Infrastructure")
sms_corpus_train_f163 <- sms_corpus_train[ind]
ind<-which(sms_raw_train$Assignment_Group=="F164 Sys  Mgm  EDW Architecture")
sms_corpus_train_f164 <- sms_corpus_train[ind]
wordcloud(sms_corpus_train_f161, min.freq = 5, random.order = FALSE)
wordcloud(sms_corpus_train_f162, min.freq = 5, random.order = FALSE)
wordcloud(sms_corpus_train_f163, min.freq = 5, random.order = FALSE)
wordcloud(sms_corpus_train_f164, min.freq = 5, random.order = FALSE)
wordcloud(sms_corpus_train, min.freq = 10, random.order = FALSE)
sms_train <- DocumentTermMatrix(sms_corpus_train)
sms_test <- DocumentTermMatrix(sms_corpus_test)
sms_train.m <- as.matrix(sms_train)
sms_test.m <- as.matrix(sms_test)
sms_train.df <- as.data.frame(sms_train.m)
sms_test.df <- as.data.frame(sms_test.m)
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c("No", "Yes"))
return(x)
}
#naive bayes only works with catagorigal data but DTM contains count
#so we will change it to 1 or 0
sms_train.df <- apply(sms_train.df, MARGIN = 2, convert_counts)
sms_test.df <- apply(sms_test.df, MARGIN = 2, convert_counts)
sms_classifier <- naiveBayes(sms_train.df, as.factor(sms_raw_train$Assignment_Group),laplace=1)
sms_test_pred_e <- predict(sms_classifier, sms_test.df,type="raw")
a<-table(True=sms_raw_test$Assignment_Group,Pred=sms_test_pred_e)
len(sms_raw_test$Assignment_Group)
length(sms_raw_test$Assignment_Group)
length(sms_test_pred_e)
sms_test_pred_e <- predict(sms_classifier, sms_test.df)
length(sms_test_pred_e)
a<-table(True=sms_raw_test$Assignment_Group,Pred=sms_test_pred_e)
a
I=dim(a)[1]
J=dim(a)[2]
true<-0
false<-0
for (i in 1:I){
for (j in 1:J){
if (i==j){true=true+a[i,j]}}}
for (i in 1:I){
for (j in 1:J){
if (i!=j){
false=false+a[i,j]}}}
accuracy=true/(false+true)
accuracy
input<-"JOB EWCRRW14 (EWPSAKRW14.0010.01041800.JCL) ENDED IN ERROR JCL tiludv"
input<-gsub(".", " ", input,fixed = TRUE)
corp1<-Corpus(VectorSource(input))
corpus_clean1 <- tm_map(corp1, tolower)
corpus_clean1 <- tm_map(corpus_clean1, removeNumbers)
corpus_clean1 <- tm_map(corpus_clean1, removeWords, stopwords())
corpus_clean1 <- tm_map(corpus_clean1, removePunctuation)
corpus_clean1 <- tm_map(corpus_clean1, stripWhitespace)
corpus_clean1 <- tm_map(corpus_clean1, removeWords,mystopword)
sms_corpus_test1 <- corpus_clean1
sms_test1 <- DocumentTermMatrix(sms_corpus_test1)
sms_test1.m <- as.matrix(sms_test1)
sms_test1.df <- as.data.frame(sms_test1.m)
sms_test1.df <- apply(sms_test1.df, MARGIN = 2, convert_counts)
sms_test_pred <- predict(sms_classifier, sms_test1.df)
sms_test_pred
input<-"JOB ZWCLEGB3 (EWPSAKRW14.0010.01041800.JCL) ENDED IN ERROR JCL tiludv"
input<-gsub(".", " ", input,fixed = TRUE)
corp1<-Corpus(VectorSource(input))
corpus_clean1 <- tm_map(corp1, tolower)
corpus_clean1 <- tm_map(corpus_clean1, removeNumbers)
corpus_clean1 <- tm_map(corpus_clean1, removeWords, stopwords())
corpus_clean1 <- tm_map(corpus_clean1, removePunctuation)
corpus_clean1 <- tm_map(corpus_clean1, stripWhitespace)
corpus_clean1 <- tm_map(corpus_clean1, removeWords,mystopword)
sms_corpus_test1 <- corpus_clean1
sms_test1 <- DocumentTermMatrix(sms_corpus_test1)
sms_test1.m <- as.matrix(sms_test1)
sms_test1.df <- as.data.frame(sms_test1.m)
sms_test1.df <- apply(sms_test1.df, MARGIN = 2, convert_counts)
sms_test_pred <- predict(sms_classifier, sms_test1.df)
sms_test_pred
input<-"JOB EWCRRW14 (EWPSAKRW14.0010.01041800.JCL) ENDED IN ERROR JCL tiludv"
input<-gsub(".", " ", input,fixed = TRUE)
corp1<-Corpus(VectorSource(input))
corpus_clean1 <- tm_map(corp1, tolower)
corpus_clean1 <- tm_map(corpus_clean1, removeNumbers)
corpus_clean1 <- tm_map(corpus_clean1, removeWords, stopwords())
corpus_clean1 <- tm_map(corpus_clean1, removePunctuation)
corpus_clean1 <- tm_map(corpus_clean1, stripWhitespace)
corpus_clean1 <- tm_map(corpus_clean1, removeWords,mystopword)
sms_corpus_test1 <- corpus_clean1
sms_test1 <- DocumentTermMatrix(sms_corpus_test1)
sms_test1.m <- as.matrix(sms_test1)
sms_test1.df <- as.data.frame(sms_test1.m)
sms_test1.df <- apply(sms_test1.df, MARGIN = 2, convert_counts)
sms_test_pred <- predict(sms_classifier, sms_test1.df)
sms_test_pred
a
input<-"JOB EWCSCR41 (EWPSAKRW14.0010.01041800.JCL) ENDED IN ERROR JCL tiludv"
input<-gsub(".", " ", input,fixed = TRUE)
corp1<-Corpus(VectorSource(input))
corpus_clean1 <- tm_map(corp1, tolower)
corpus_clean1 <- tm_map(corpus_clean1, removeNumbers)
corpus_clean1 <- tm_map(corpus_clean1, removeWords, stopwords())
corpus_clean1 <- tm_map(corpus_clean1, removePunctuation)
corpus_clean1 <- tm_map(corpus_clean1, stripWhitespace)
corpus_clean1 <- tm_map(corpus_clean1, removeWords,mystopword)
sms_corpus_test1 <- corpus_clean1
sms_test1 <- DocumentTermMatrix(sms_corpus_test1)
sms_test1.m <- as.matrix(sms_test1)
sms_test1.df <- as.data.frame(sms_test1.m)
sms_test1.df <- apply(sms_test1.df, MARGIN = 2, convert_counts)
sms_test_pred <- predict(sms_classifier, sms_test1.df)
```
sms_test_pred
class(sms_test_pred)
sms_test_pred[1]
print(accuracy)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
